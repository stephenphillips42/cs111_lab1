/*  open.c */

#include <fcntl.h>         /* defines options flags */
#include <sys/types.h>     /* defines types used by sys/stat.h */
#include <sys/stat.h>      /* defines S_IREAD & S_IWRITE  */
#include "stdlib.h"
#include "stdio.h"

#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1

static char message[] = "Hello, world";
static char *ls_args[]= { "ls", "-al", 0 };
static char *wc_args[] = { "wc", 0 };


int main(int argc, char *argv[]) {
    int pipefd[2];
    pid_t ls_pid, wc_pid;

    pipe(pipefd);

    printf("Parent... (%d)\n", getpid());

    // this child is generating output to the pipe
    //
    if ((ls_pid = fork()) == 0) {
        // attach stdout to the left side of pipe
        // and inherit stdin and stdout from parent
        printf("Child 1... (%d)\n", getpid());
        dup2(pipefd[1],STDOUT_FILENO);
        close(pipefd[0]);              // not using the right side

        execvp(ls_args[0], ls_args);
        perror("exec ls failed");
        exit(EXIT_FAILURE);
    } 
    else {
      printf("Parent... (%d)\n", getpid());
      //printf("IN THE Parent.\n");
      // this child is consuming input from the pipe
      //
      if ((wc_pid = fork()) == 0) {
          // attach stdin to the right side of pipe
          // and inherit stdout and stderr from parent
          printf("Child 2... (%d)\n", getpid());
        
          dup2(pipefd[0], STDIN_FILENO);

          close(pipefd[1]);              // not using the left side
          execvp(wc_args[0], wc_args);
          perror("exec wc failed");
          exit(EXIT_FAILURE);
      }
      else {
        int status;
        printf("Parent... (%d)\n", getpid());
        //while (waitpid(ls_pid, &status, 0) < 0)
        //  continue;
        //printf("ls: %d\n", status);
        //waitpid(wc_pid, &status, 0);
        //printf("ls: %d\n", status);
      }
    }

    // explicitly not waiting for ls_pid here
    // wc_pid isn't even my child, it belongs to ls_pid

    return EXIT_SUCCESS;
}





